name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Check formatting
        run: npx prettier --check "src/**/*.{js,ts}" "frontend/**/*.{js,ts,html,css}"

  # =============================================================================
  # TESTING
  # =============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # =============================================================================
  # BUILD
  # =============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [ quality, test ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          
      - name: Build worker
        run: npm run build:worker
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            frontend/build/
            .wrangler/

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Deploy to Cloudflare Workers (Staging)
        run: |
          npx wrangler deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Run smoke tests
        run: |
          npm run test:smoke -- --base-url=${{ steps.deploy.outputs.url }}
          
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: Deploy to Cloudflare Workers (Production)
        run: |
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Run health checks
        run: |
          npm run test:health -- --base-url=${{ steps.deploy.outputs.url }}
          
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}'
            });
            
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # DATABASE MIGRATIONS
  # =============================================================================
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [ deploy-staging, deploy-production ]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run migrations (Staging)
        if: needs.deploy-staging.result == 'success'
        run: |
          npx wrangler d1 execute wt-pos-payroll-db --env staging --file=./src/database/migrations/latest.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Run migrations (Production)
        if: needs.deploy-production.result == 'success'
        run: |
          npx wrangler d1 execute wt-pos-payroll-db --env production --file=./src/database/migrations/latest.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # =============================================================================
  # MONITORING & ALERTS
  # =============================================================================
  monitor:
    name: Monitor Deployment
    runs-on: ubuntu-latest
    needs: [ deploy-staging, deploy-production, migrate ]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance tests
        run: npm run test:performance
        
      - name: Check uptime
        run: npm run test:uptime
        
      - name: Generate deployment report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const report = {
              deployment: {
                staging: '${{ needs.deploy-staging.result }}',
                production: '${{ needs.deploy-production.result }}',
                migrations: '${{ needs.migrate.result }}'
              },
              timestamp: new Date().toISOString(),
              commit: '${{ github.sha }}',
              branch: '${{ github.ref }}'
            };
            
            fs.writeFileSync('deployment-report.json', JSON.stringify(report, null, 2));
            
      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.json

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [ deploy-staging, deploy-production, monitor ]
    if: always()
    
    steps:
      - name: Cleanup old deployments
        run: |
          echo "Cleaning up old deployment artifacts..."
          
      - name: Notify completion
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            Deployment pipeline completed for ${{ github.repository }}@${{ github.sha }}
            Staging: ${{ needs.deploy-staging.result }}
            Production: ${{ needs.deploy-production.result }} 